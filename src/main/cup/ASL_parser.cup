package asl.input;

import java_cup.runtime.*;
import asl.input.ASLLexer;
import asl.input.ASLConsumer;
import asl.model.core.*;
import asl.model.system.SequenceFacade;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

scan with {: return super.scan(); :};

parser code {:
  ASLConsumer consumer;
  public ASLParser(Scanner lex, ASLConsumer consumer_) {
    super(lex, new ComplexSymbolFactory());
    consumer = consumer_;
  }

  private static List<ASLObject> makeList(ASLObject... args) {
    return new ArrayList<>(Arrays.asList(args));
  }

  private static FunctionCall funCall(String name, List<ASLObject> args) {
    return new FunctionCall(name, args);
  }

  private static FunctionCall funCall(String name, ASLObject... args) {
    return new FunctionCall(name, Arrays.asList(args));
  }

  private static FunctionCall defunCall(boolean s, boolean v, QNameAtom name, FunctionCall body, List<ASLObject> args) {
    if (args.isEmpty()) {
      if (s) throw new Jump(CommonAttributes.FUNCTION_CALL_JUMP, "special function should have at least one argument!");
      if (v) throw new Jump(CommonAttributes.FUNCTION_CALL_JUMP, "function with varied arguments number should have at least one argument!");
    }
    List<ASLObject> defArgs = makeList(
      s ? BooleanAtom.TRUE : Undef.UNDEF,
      v ? BooleanAtom.TRUE : Undef.UNDEF,
      name,
      body
    );
    defArgs.addAll(args);
    return new FunctionCall("defunFun", defArgs);
  }
:};


/* ------------Declaration of Terminals and Non Terminals Section----------- */

terminal _IF;
terminal _THEN;
terminal _ELSE;
terminal _WHILE;
terminal _DEFUN;
terminal _DEFUNSPEC;
terminal _DOTS;
terminal _LCURL;
terminal _RCURL;
terminal _SEMICOLON;
terminal _COMMA;
terminal _LPAR;
terminal _RPAR;
terminal _LBR;
terminal _RBR;
terminal _STAR;
terminal _SLASH;
terminal _PERCENT;
terminal _PLUS;
terminal _MINUS;
terminal _EQ;
terminal _DOT;
terminal _GT;
terminal _GTE;
terminal _LT;
terminal _LTE;
terminal _EQQ;
terminal _NEQ;
terminal _AND;
terminal _OR;
terminal _NOT;
terminal UMINUS;

terminal Undef UNDEF;
terminal IntegerAtom INTCONST;
terminal DoubleAtom DOUBLECONST;
terminal StringAtom STRING;
terminal BooleanAtom TRUE, FALSE;
terminal Variable VAR, ATTRVAR;
terminal QNameAtom QNAME;

non terminal program;
non terminal List<ASLObject>
    dot_expr,
    br_expr,
    link_expr,
    one_branch_cond,
    condition,
    st_list,
    st_list_opt,
    arg_commalist,
    arg_commalist_opt,
    plus_expr,
    mult_expr,
    and_expr,
    or_expr;
non terminal ASLObject statement, expr;
non terminal FunctionCall progn_expr;


/* -------------Precedence and Associatively of Terminals Section----------- */

precedence right _EQ;
precedence right _IF, _THEN, _ELSE;
precedence right _WHILE;
precedence right _DEFUN, _DEFUNSPEC;
precedence left _OR;
precedence left _AND;
precedence left _EQQ, _NEQ;
precedence left _GT, _GTE, _LT, _LTE;
precedence left _PLUS, _MINUS;
precedence left _STAR, _SLASH, _PERCENT;
precedence left _DOT, _LBR;
precedence right _NOT, UMINUS;


/* ----------------------------Grammar Section-------------------- */

program ::=
    /* empty */
    | program statement:stmt                          {: consumer.consume(stmt); :}
    ;

statement ::=
    expr:e _SEMICOLON                                 {: RESULT = e; :}
    ;

progn_expr ::=
    _LCURL st_list_opt:list _RCURL                    {: RESULT = funCall("progn", list); :}
    | _LCURL expr:e _RCURL                            {: RESULT = funCall("progn", e); :}
    ;

st_list_opt ::=
    st_list:list                                      {: RESULT = list; :}
    | st_list:list expr:e                             {: list.add(e); RESULT = list; :}
    | /* empty */                                     {: RESULT = makeList(); :}
    ;

st_list ::=
    st_list:list statement:e                          {: list.add(e); RESULT = list; :}
    | statement:e                                     {: RESULT = makeList(e); :}
    ;

expr ::=
    VAR:v                                             {: RESULT = v; :}
    | progn_expr:p_e                                  {: RESULT = p_e; :}
    | VAR:lhs _EQ expr:rhs                            {: RESULT = funCall("setq", lhs, rhs); :}
    | link_expr:list                                  {: RESULT = funCall("aref", list); :}
    | link_expr:list _EQ expr:e                       {: list.add(e); RESULT = funCall("aset", list); :}
    | expr:e0 _EQQ expr:e1                            {: RESULT = funCall("eq", e0, e1); :}
    | expr:e0 _NEQ expr:e1                            {: RESULT = funCall("neq", e0, e1); :}
    | _LPAR expr:e _RPAR                              {: RESULT = e; :}
    | QNAME:fname _LPAR arg_commalist_opt:al _RPAR    {: RESULT = funCall(fname.value(), al); :}
    | INTCONST:atom                                   {: RESULT = atom; :}
    | DOUBLECONST:atom                                {: RESULT = atom; :}
    | STRING:atom                                     {: RESULT = atom; :}
    | TRUE:atom                                       {: RESULT = atom; :}
    | FALSE:atom                                      {: RESULT = atom; :}
    | UNDEF:und                                       {: RESULT = und; :}
    | QNAME:atom                                      {: RESULT = atom; :}
    | condition:args                                  {: RESULT = funCall("cond", args); :}
    | and_expr:list                                   {: RESULT = funCall("and", list); :}
    | or_expr:list                                    {: RESULT = funCall("or", list); :}
    | expr:e0 _SLASH    expr:e1                       {: RESULT = funCall("div", e0, e1); :}
    | expr:e0 _PERCENT  expr:e1                       {: RESULT = funCall("mod", e0, e1); :}
    | plus_expr:list                                  {: RESULT = funCall("add", list); :}
    | expr:e0 _MINUS    expr:e1                       {: RESULT = funCall("sub", e0, e1); :}
    | mult_expr:list                                  {: RESULT = funCall("mul", list); :}
    | expr:e0 _GT       expr:e1                       {: RESULT = funCall("gt", e0, e1); :}
    | expr:e0 _GTE      expr:e1                       {: RESULT = funCall("gte", e0, e1); :}
    | expr:e0 _LT       expr:e1                       {: RESULT = funCall("lt", e0, e1); :}
    | expr:e0 _LTE      expr:e1                       {: RESULT = funCall("lte", e0, e1); :}
    | _MINUS:op expr:e0                               {: RESULT = funCall("uminus", e0); :} %prec UMINUS
    | _NOT:op expr:e0                                 {: RESULT = funCall("not", e0); :}
    | _WHILE _LPAR expr:e0 _RPAR expr:e1                          {: RESULT = funCall("while", e0, e1); :}
    | _DEFUN QNAME:name _LPAR arg_commalist_opt:args _RPAR progn_expr:body
                                                      {: RESULT = defunCall(false, false, name, body, args); :}
    | _DEFUN QNAME:name _LPAR arg_commalist_opt:args _DOTS _RPAR progn_expr:body
                                                      {: RESULT = defunCall(false, true, name, body, args); :}
    | _DEFUNSPEC QNAME:name _LPAR arg_commalist_opt:args _RPAR progn_expr:body
                                                      {: RESULT = defunCall(true, false, name, body, args); :}
    | _DEFUNSPEC QNAME:name _LPAR arg_commalist_opt:args _DOTS _RPAR progn_expr:body
                                                      {: RESULT = defunCall(true, true, name, body, args); :}
    ;

arg_commalist_opt ::=
    arg_commalist:al                                  {: RESULT = al; :}
    | /* empty */                                     {: RESULT = makeList(); :}
    ;

arg_commalist ::=
    arg_commalist:list _COMMA expr:a                  {: list.add(a); RESULT = list; :}
    | expr:a                                          {: RESULT = makeList(a); :}
    ;

plus_expr ::=
    plus_expr:list _PLUS expr:e                       {: list.add(e); RESULT = list; :}
    | expr:e0      _PLUS expr:e1                      {: RESULT = makeList(e0, e1); :}
    ;

mult_expr ::=
    mult_expr:list _STAR expr:e                       {: list.add(e); RESULT = list; :}
    | expr:e0      _STAR expr:e1                      {: RESULT = makeList(e0, e1); :}
    ;

and_expr ::=
    and_expr:list  _AND expr:e                        {: list.add(e); RESULT = list; :}
    | expr:e0      _AND expr:e1                       {: RESULT = makeList(e0, e1); :}
    ;

or_expr ::=
    or_expr:list   _OR expr:e                         {: list.add(e); RESULT = list; :}
    | expr:e0      _OR expr:e1                        {: RESULT = makeList(e0, e1); :}
    ;

dot_expr ::=
    dot_expr:list  _DOT expr:attr                     {: list.add(attr); RESULT = list; :}
    | VAR:var      _DOT expr:attr                     {: RESULT = makeList(var, attr); :}
    ;

br_expr ::=
    dot_expr:list  _LBR expr:attr _RBR                {: list.add(attr); RESULT = list; :}
    | br_expr:list _LBR expr:attr _RBR                {: list.add(attr); RESULT = list; :}
    | VAR:var      _LBR expr:attr _RBR                {: RESULT = makeList(var, attr); :}
    ;

link_expr ::=
    dot_expr:list                                     {: RESULT = list; :}
    | br_expr:list                                    {: RESULT = list; :}
    ;

one_branch_cond ::=
    _IF expr:e0 _THEN expr:e1                         {: RESULT = makeList(e0, e1); :}
    ;

condition ::=
    one_branch_cond:args                              {: RESULT = args; :}
    | one_branch_cond:args _ELSE expr:e               {: args.add(e); RESULT = args; :}
    ;
