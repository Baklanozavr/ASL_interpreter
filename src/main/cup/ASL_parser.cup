package asl.input;

import java_cup.runtime.*;
import asl.input.ASLLexer;
import asl.input.ASLConsumer;
import asl.model.core.*;
import asl.model.AttributonFactory;
import asl.model.SequenceFacade;

scan with {: return super.scan(); :};

parser code {:
  ASLConsumer consumer;
  public ASLParser(Scanner lex, ASLConsumer consumer_) {
    super(lex, new ComplexSymbolFactory());
    consumer = consumer_;
  }
:};


/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
terminal _SEMICOLON;
terminal _COMMA;
terminal _LPAR;
terminal _RPAR;
terminal _STAR;
terminal _SLASH;
terminal _PLUS;
terminal _MINUS;
terminal _EQ;
terminal UMINUS;

terminal Undef UNDEF;
terminal IntegerAtom INTCONST;
terminal DoubleAtom DOUBLECONST;
terminal BooleanAtom TRUE, FALSE;
terminal QNameAtom QNAME, VAR, ATTRVAR;

non terminal program;
non terminal Attributon arg_commalist, arg_commalist_opt;
non terminal Thing var, statement, expr, arg;


/* -------------Precedence and Associatively of Terminals Section----------- */

precedence left _PLUS, _MINUS, _STAR, _SLASH;
precedence right _EQ, UMINUS;


/* ----------------------------Grammar Section-------------------- */
   
program   ::=
    /* empty */
    | program statement:stmt                          {: consumer.consume(stmt); :}
    ;

statement ::=
    var:lhs _EQ expr:rhs _SEMICOLON                   {: RESULT = AttributonFactory.makeFunctionCall("setq", lhs, rhs); :}
    | expr:e _SEMICOLON                               {: RESULT = e; :}
    ;

expr ::=
    var:v                                             {: RESULT = v; :}
    | _LPAR expr:e _RPAR                              {: RESULT = e; :}
    | QNAME:fname _LPAR arg_commalist_opt:al _RPAR    {: RESULT = AttributonFactory.makeFunctionCall(fname, al); :}
    | INTCONST:atom                                   {: RESULT = atom; :}
    | DOUBLECONST:atom                                {: RESULT = atom; :}
    | TRUE:atom                                       {: RESULT = atom; :}
    | FALSE:atom                                      {: RESULT = atom; :}
    | UNDEF:und                                       {: RESULT = und; :}
    | QNAME:atom                                      {: RESULT = atom; :}
    | expr:e0 _SLASH    expr:e1                       {: RESULT = AttributonFactory.makeFunctionCall ("div"    , e0, e1); :}
    | expr:e0 _PLUS     expr:e1                       {: RESULT = AttributonFactory.makeFunctionCall ("add"    , e0, e1); :}
    | expr:e0 _MINUS    expr:e1                       {: RESULT = AttributonFactory.makeFunctionCall ("sub"    , e0, e1); :}
    | expr:e0 _STAR     expr:e1                       {: RESULT = AttributonFactory.makeFunctionCall ("mul"    , e0, e1); :}
    | _MINUS:op expr:e0                               {: RESULT = AttributonFactory.makeFunctionCall ("uminus" , e0); :} %prec UMINUS
    ;

arg_commalist_opt  ::=
    arg_commalist:al                                  {: RESULT = al; :}
    | /* empty */                                     {: RESULT = SequenceFacade.createSequence(); :}
    ;

arg_commalist  ::=
    arg_commalist:al _COMMA arg:a                     {: RESULT = SequenceFacade.appendToSequence(al, a); :}
    | arg:a                                           {: RESULT = SequenceFacade.createSequence(a); :}
    ;

arg ::=
    expr:e                                            {: RESULT = e; :}
    ;

var  ::=
    VAR:vl                                            {: RESULT = AttributonFactory.makeVariable(vl); :}
    ;
