package com.asl20;

import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ScannerBuffer;
import java_cup.runtime.XMLElement;
import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamWriter;
import java.io.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Stack;
import com.asl20.ASL20SampleLexer;

import javax.xml.transform.*;
import javax.xml.transform.stream.*;

init with {: /* scanner.init(); */ ;             :};
scan with {: return super.scan(); /*scanner.next_token();*/ :};

parser code {:
  ASL20ParserConsumer consumer;
  public ASL20Parser(Scanner /* ASL20SampleLexer is needlessly specific here */ lex, ComplexSymbolFactory sf, ASL20ParserConsumer consumer_) {
    super(lex,sf); consumer = consumer_;
  }
:};

terminal _SEMICOLON;
terminal _COMMA;
terminal _LPAR;
terminal _RPAR;
terminal _STAR;
terminal _SLASH;
terminal _PLUS;
terminal _MINUS;
terminal _EQ;
terminal UMINUS;

terminal Object UNDEF;
terminal Integer INTCONST;
terminal Double DOUBLECONST;
terminal Boolean TRUE, FALSE;
terminal String QNAME, VAR, ATTRVAR;

non terminal program;
non terminal ASL20Tree topitem, var;
non terminal GrObj stmt, expr, arg;
/* non terminal GrObjVector var_list ; */
non terminal GrObjVector arg_commalist_opt, arg_commalist, dot_attr_list;

precedence right _EQ;
precedence left _PLUS, _MINUS;
precedence left _STAR, _SLASH;
precedence right UMINUS;

program   ::=
    /* empty */
    | program topitem
    ;

topitem ::=
    | stmt:t {: consumer.consumeTopLevel(t); :}
    ;

stmt ::=
    var:lhs _EQ expr:rhs _SEMICOLON                                     {: RESULT = ASL20Tree.makeFuncall ("setq", lhs, rhs).addLocation(consumer, lhsxleft); :}
    | expr:e _SEMICOLON                                                 {: RESULT = e; :}
    ;

expr ::=
    var:v                                                               {: RESULT = v; :}
    | _LPAR expr:e _RPAR                                                {: RESULT = e; :}
    | IDENT:fname _LPAR arg_commalist_opt:al _RPAR                      {: RESULT = ASL20Tree.makeFuncall2(fname.toString(), al).addLocation(consumer, fnamexleft); :}
    | INTCONST:atom                                                     {: RESULT = atom; :}
    | expr:e0 _SLASH     expr:e1                                        {: RESULT = ASL20Tree.makeFuncall ("div"    , e0, e1).addLocation(consumer, e0xleft); :}
    | expr:e0 _PLUS      expr:e1                                        {: RESULT = ASL20Tree.makeAssocOp ("add"    , e0, e1).addLocation(consumer, e0xleft); :}
    | expr:e0 _MINUS     expr:e1                                        {: RESULT = ASL20Tree.makeFuncall ("sub"    , e0, e1).addLocation(consumer, e0xleft); :}
    | expr:e0 _STAR      expr:e1                                        {: RESULT = ASL20Tree.makeAssocOp ("mul"    , e0, e1).addLocation(consumer, e0xleft); :}
    | _MINUS:op expr:e0                                                 {: RESULT = ASL20Tree.makeFuncall ("uminus" , e0).addLocation(consumer, opxleft); :} %prec UMINUS
    ;

arg_commalist_opt  ::=
    arg_commalist:al                                                    {: RESULT = al; :}
    | /* empty */                                                       {: RESULT = new GrObjVector(); :}
    ;

arg_commalist  ::=
    arg_commalist:al _COMMA arg:a                                       {: al.add (a); RESULT = al; :}
    | arg:a                                                             {: GrObjVector al = new GrObjVector(); al.add (a); RESULT = al; :}
    ;

arg ::=
    expr:e                                                              {: RESULT = e; :}
    ;

var  ::=
    VAR:vl                                                              {: RESULT = new ASL20Tree(ASL20Tree.SubTypeId.VAR, vl).addLocation(consumer, vlxleft); :}
    ;
